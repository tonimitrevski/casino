{"version":3,"sources":["redux/Category/selectors/index.ts","components/Header/Header.tsx","redux/Category/types/select-category-action-type.ts","components/Placeholder/Placeholder.tsx","redux/Jackpot/selectors/index.ts","components/Game/Ribbon/Ribbon.tsx","components/Game/Jackpot/Jackpot.tsx","components/Game/Game.tsx","components/Spinner/Spinner.tsx","core/aggregate/jackpots.aggregate.ts","redux/Services/fetch-games-and-jack-pots/fetch-games-and-jack-pots.ts","redux/Game/actions/fetch-games-action.ts","redux/Game/types/fetch-games-action.type.ts","redux/Jackpot/actions/fetch-jackpots-action.ts","redux/Jackpot/types/fetch-jackpot-action.type.ts","redux/Game/actions/cache-games-action.ts","redux/Game/types/cache-games-action.type.ts","redux/Category/reducers/data/initial-state-select-category.ts","redux/Game/selectors/get-games-selector/prepare-game-data.ts","redux/Game/selectors/get-games-selector.ts","components/MainContainer/MainContainer.tsx","core/SiteRouter/SiteRouter.tsx","App.tsx","serviceWorker.ts","redux/Jackpot/reducers/index.ts","redux/Game/reducers/game-reducer.ts","redux/Category/reducers/index.ts","redux/reducers.ts","redux/store.ts","index.tsx"],"names":["getCategoriesSelector","state","categories","data","getActiveCategory","selected","buttonNavigationClass","currentCategoryKey","navigationToggle","navigation","buttonToggle","toggleNavigation","setNavigation","selectCategoryAction","value","type","payload","connect","activeCategory","dispatch","bindActionCreators","selectCategory","props","useState","className","onClick","map","el","to","key","Placeholder","getJackpotsSelector","jackpots","Ribbon","Jackpot","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format","currencyFormat","game","once","offset","height","placeholder","includes","showNewRibbon","src","image","alt","name","jackpotAggregate","hasOwnProperty","id","showJackpot","override","css","Spinner","pending","loading","setLoading","useEffect","setTimeout","size","JackpotsAggregate","fetchGamesAndJackPots","a","urls","Promise","all","url","fetch","response","res","json","prepareJackpot","dataLength","length","jackAggregate","i","allCategories","initialStateSelectCategory","setJackpot","cachedGames","set","games","filter","setOtherGamesWhichCategoryDoesntExist","setGamesOnCurrentCategories","category","Map","getGamesSelector","cache","get","error","clear","prepareGameData","gameStore","fetchGames","gamesCount","renderGamesArray","push","renderGames","Child","useParams","some","exact","path","render","children","App","Boolean","window","location","hostname","match","jackpotInitialState","jackPotReducer","action","initialState","gameReducer","categoryReducer","combineReducers","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","store","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bfea817d.chunk.js","sourcesContent":["import {StoreType} from \"../../store.type\";\n\nexport const getCategoriesSelector = (state: StoreType) => state.categories.data;\nexport const getActiveCategory = (state: StoreType) => state.categories.selected;\n","import React, {useState} from \"react\";\nimport \"./Header.scss\";\nimport {StoreType} from \"../../redux/store.type\";\nimport {connect} from \"react-redux\";\nimport {getActiveCategory, getCategoriesSelector} from \"../../redux/Category/selectors\";\nimport {CategoryInterface} from \"../../core/models/category-interface\";\nimport {bindActionCreators, Dispatch} from \"redux\";\nimport {SelectCategoryAction} from \"../../redux/Category/types/select-category-action-type\";\nimport { Link } from \"react-router-dom\";\nexport const Header = (props: { categories: CategoryInterface[], activeCategory: string, selectCategory: Function}) => {\n  const {categories, activeCategory, selectCategory} = props;\n\n  const [navigation, setNavigation] = useState(false);\n  return (\n    <header className=\"Header\">\n      <div className=\"Header__navigation-button\">\n        <button onClick={() => toggleNavigation(navigation, setNavigation)} className={buttonToggle(navigation)} type=\"button\">\n          <span className=\"hamburger-box\">\n            <span className=\"hamburger-inner\"></span>\n          </span>\n        </button>\n      </div>\n      <nav className={navigationToggle(navigation)}>\n          {\n            categories.map((el: CategoryInterface) => {\n              return <Link to={\"/\"+el.key} onClick={() => {selectCategory(el.key)}} key={el.key} className={buttonNavigationClass(activeCategory, el.key)}>\n                {el.value}\n              </Link>\n            })\n          }\n      </nav>\n    </header>\n  );\n}\n\nconst buttonNavigationClass = (selected: string, currentCategoryKey: string) => {\n  return selected === currentCategoryKey ? 'navigation__nav__link active' : 'navigation__nav__link'\n}\n\nconst navigationToggle = (navigation: boolean) => {\n  return navigation ? 'navigation__nav active' : 'navigation__nav'\n}\n\nconst buttonToggle = (navigation: boolean) => {\n  return navigation ? \"hamburger hamburger--slider is-active\" : \"hamburger hamburger--slider\";\n}\n\nconst toggleNavigation = (navigation: boolean, setNavigation: Function) => {\n  setNavigation(!navigation);\n}\n\nconst mapStateToProps = (state: StoreType) => ({\n  categories: getCategoriesSelector(state),\n  activeCategory: getActiveCategory(state)\n})\nconst selectCategoryAction = (value: string) => ({ type: SelectCategoryAction, payload: value })\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n  selectCategory: selectCategoryAction\n}, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","export const SelectCategoryAction = 'SelectCategoryAction'\n\nexport type SelectCategoryActionType = {\n  type: typeof SelectCategoryAction\n  payload: string\n}\n","import React from 'react';\nimport \"./Placeholder.scss\";\n\nexport default function Placeholder() {\n  return (\n    <div className=\"placeholder\">\n      <div className=\"spinner\">\n        <div className=\"rect1\"></div>\n        <div className=\"rect2\"></div>\n        <div className=\"rect3\"></div>\n        <div className=\"rect4\"></div>\n        <div className=\"rect5\"></div>\n      </div>\n    </div>\n  );\n}\n","import {StoreType} from \"../../store.type\";\n\nexport const getJackpotsSelector = (state: StoreType) => state.jackpots;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Ribbon.scss\";\n\nconst Ribbon = (props : { type: string }) => {\n  const { type } = props;\n  return (\n    <div className=\"ribbon\">\n      <span className=\"ribbon__label\">{type}</span>\n    </div>\n  );\n}\n\nRibbon.propTypes = {\n  type: PropTypes.string,\n};\n\nexport default Ribbon;\n","import \"./Jackpot.scss\";\nimport React from \"react\";\n\nexport const Jackpot = (props : { amount: number }) => {\n  const { amount } = props;\n  return (\n    <div className=\"jackpot\">\n      <div className=\"jackpot__container\">\n        <span className=\"amount\">{currencyFormat(amount)}</span>\n      </div>\n    </div>\n  );\n}\n\nfunction currencyFormat(amount: number) {\n  return new Intl.NumberFormat('en-UK', {\n    style: 'currency',\n    currency: 'GBP',\n    minimumFractionDigits: 2\n  }).format(amount)\n}\n\nexport default Jackpot;\n","import React from \"react\";\nimport \"./Game.scss\";\nimport {GameInterface} from \"../../core/models/game-interface\";\nimport LazyLoad from 'react-lazyload';\nimport Placeholder from \"../Placeholder/Placeholder\";\nimport {connect} from \"react-redux\";\nimport {StoreType} from \"../../redux/store.type\";\nimport {getJackpotsSelector} from \"../../redux/Jackpot/selectors\";\nimport {JackpotStateInterface} from \"../../redux/Jackpot/types/jackpot-state-interface\";\nimport {JackpotsAggregate} from \"../../core/aggregate/jackpots.aggregate\";\nimport Ribbon from \"./Ribbon/Ribbon\";\nimport {Jackpot} from \"./Jackpot/Jackpot\";\n\nexport const Game = (props: { game: GameInterface, jackpots: JackpotStateInterface }) => {\n  const { game, jackpots } = props;\n  return (\n      <div className=\"Game\">\n          <LazyLoad once={true} offset={100} height={150} placeholder={<Placeholder/>}>\n            <div className=\"Game__container\">\n              {showNewRibbon(game)}\n              <img src={game.image} alt={game.name}/>\n              {showJackpot(jackpots.data, game)}\n            </div>\n            <div className=\"Game__play-button\"></div>\n          </LazyLoad>\n      </div>\n  );\n}\n\nfunction showNewRibbon(game: GameInterface): string | JSX.Element {\n  if(!game.categories.includes(\"new\")) {\n    return '';\n  }\n  return <Ribbon type=\"new\" />;\n}\n\nfunction showJackpot(jackpotAggregate: JackpotsAggregate, game: GameInterface) {\n  if(!jackpotAggregate.hasOwnProperty(game.id)) {\n    return '';\n  }\n  return (\n    <Jackpot amount={jackpotAggregate[game.id].amount} />\n  );\n}\n\nconst mapStateToProps = (state: StoreType) => ({\n  jackpots: getJackpotsSelector(state)\n})\n\nexport default connect(mapStateToProps)(Game);\n","import React, {useEffect, useState} from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nimport { css } from \"@emotion/core\";\nimport \"./Spinner.scss\";\nconst override = css`\n    border: 5px solid;\n    border-color: #78bd1f;\n    border-bottom-color: transparent;\n`;\n\nexport const Spinner = (props: {pending: boolean}) => {\n  const {pending} = props;\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setTimeout(() => setLoading(pending), 1000);\n  }, [pending]); // Only re-run the effect if count changes\n  return (\n    <div className=\"loading\">\n      <ClipLoader\n        css={override}\n        size={150}\n        loading={loading}\n      />\n    </div>\n  );\n}\n\nexport default Spinner;\n","import {JackpotInterface} from \"../models/jackpot-interface\";\n\nexport class JackpotsAggregate {\n  [jackpot: string]: JackpotInterface\n}\n","import {Dispatch} from \"redux\";\nimport {fetchGamesAction} from \"../../Game/actions/fetch-games-action\";\nimport {cacheGameAction} from \"../../Game/actions/cache-games-action\";\nimport {JackpotsAggregate} from \"../../../core/aggregate/jackpots.aggregate\";\nimport {fetchJackpotsAction} from \"../../Jackpot/actions/fetch-jackpots-action\";\nimport {JackpotInterface} from \"../../../core/models/jackpot-interface\";\n\nexport default function fetchGamesAndJackPots() {\n  return async (dispatch: Dispatch) => {\n    const urls = [\n      \"https://nssw02zdf3.execute-api.us-east-1.amazonaws.com/games\",\n      \"https://nssw02zdf3.execute-api.us-east-1.amazonaws.com/jackpots\",\n    ];\n    let response = await Promise.all(urls.map(url=>fetch(url)));\n    let data = await Promise.all(response.map(res => res.json()));\n    dispatch(fetchGamesAction(data[0]));\n    dispatch(fetchJackpotsAction(prepareJackpot(data[1])));\n    dispatch(cacheGameAction());\n  }\n}\n\nexport function prepareJackpot(data: JackpotInterface[]) {\n  const dataLength = data.length;\n  const jackAggregate = new JackpotsAggregate();\n  for (let i = 0; i < dataLength; i++) {\n    jackAggregate[data[i].game] = data[i];\n  }\n  return jackAggregate;\n}\n","import {FetchGamesAction} from \"../types/fetch-games-action.type\";\nimport {GameInterface} from \"../../../core/models/game-interface\";\n\nexport function fetchGamesAction(games: GameInterface[]): FetchGamesAction {\n  return {\n    type: FetchGamesAction,\n    payload: games\n  }\n}\n","import {GameInterface} from \"../../../core/models/game-interface\";\nexport const FetchGamesAction = 'FetchGamesAction';\n\nexport type FetchGamesAction = {\n  type: typeof FetchGamesAction\n  payload: GameInterface[]\n}\n","import {FetchJackpotAction, FetchJackPotAction} from \"../types/fetch-jackpot-action.type\";\nimport {JackpotsAggregate} from \"../../../core/aggregate/jackpots.aggregate\";\n\nexport function fetchJackpotsAction(jackpots: JackpotsAggregate): FetchJackPotAction {\n  return {\n    type: FetchJackpotAction,\n    payload: jackpots\n  }\n}\n","import {JackpotsAggregate} from \"../../../core/aggregate/jackpots.aggregate\";\nexport const FetchJackpotAction = 'FetchJackpotAction'\n\nexport type FetchJackPotAction = {\n  type: typeof FetchJackpotAction\n  payload: JackpotsAggregate\n}\n","import {CacheGamesAction} from \"../types/cache-games-action.type\";\n\nexport function cacheGameAction(): CacheGamesAction {\n  return {\n    type: CacheGamesAction,\n  }\n}\n","export const CacheGamesAction = 'CacheGamesAction';\n\nexport type CacheGamesAction = {\n  type: typeof CacheGamesAction\n}\n","import {CategoryStateInterface} from \"../../types/category-state-interface\";\nimport {CategoryInterface} from \"../../../../core/models/category-interface\";\n\nexport const categoryData: CategoryInterface[] = [\n  {key: \"home\", value: \"Home\"},\n  {key: \"new\", value: \"New Games\"},\n  {key: \"slots\", value: \"Slots\"},\n  {key: \"jackpots\", value: \"Jackpots\"},\n  {key: \"live\", value: \"Live\"},\n  {key: \"blackjack\", value: \"Blackjack\"},\n  {key: \"roulette\", value: \"Roulette\"},\n  {key: \"table\", value: \"Table\"},\n  {key: \"poker\", value: \"Poker\"},\n  {key: \"other\", value: \"Other\"},\n]\n\nexport const allCategories: Array<string> = [\"home\", \"new\", \"slots\", \"jackpots\", \"live\", \"blackjack\", \"roulette\", \"table\", \"poker\"]\n\n\nexport const initialStateSelectCategory: CategoryStateInterface = {\n  data: categoryData,\n  selected: \"home\"\n};\n","import {StoreType} from \"../../../store.type\";\nimport {allCategories} from \"../../../Category/reducers/data/initial-state-select-category\";\nimport {GameInterface} from \"../../../../core/models/game-interface\";\nimport {CategoryInterface} from \"../../../../core/models/category-interface\";\nimport {GameStateInterface} from \"../../types/game-state-interface\";\n\nexport function prepareGameData(\n  state: StoreType,\n  selectCategory: string,\n  cachedGames: Map<string, GameInterface[]>\n): GameStateInterface\n{\n  cachedGames.clear();\n  for (let category of state.categories.data) {\n    if (category.key === 'home') {\n      cachedGames.set(category.key, state.games.data);\n      continue;\n    }\n\n    if (category.key === 'jackpots') {\n      setJackpot(state, cachedGames);\n      continue;\n    }\n\n    if (category.key === 'other') {\n      setOtherGamesWhichCategoryDoesntExist(cachedGames, state);\n      continue;\n    }\n    setGamesOnCurrentCategories(cachedGames, category, state);\n  }\n\n  return {\n    pending: false,\n    data: cachedGames.get(selectCategory) as GameInterface[],\n    error: null,\n    cache: false\n  }\n}\n\nfunction setJackpot(state: StoreType, cachedGames: Map<string, GameInterface[]>) {\n  const jackpotAggregate = state.jackpots.data\n\n  cachedGames.set('jackpots', state.games.data.filter((game) => {\n    return jackpotAggregate.hasOwnProperty(game.id)\n  }));\n}\n\nfunction setOtherGamesWhichCategoryDoesntExist(cachedGames: Map<string, GameInterface[]>, state: StoreType) {\n  cachedGames.set('other', state.games.data.filter((game) => {\n    const length = game.categories.length;\n    for (let i = 0; i < length; i++) {\n      if (allCategories.includes(game.categories[i])) {\n        continue;\n      }\n      return true;\n    }\n    return false;\n  }));\n}\n\nfunction setGamesOnCurrentCategories(cachedGames: Map<string, GameInterface[]>, category: CategoryInterface, state: StoreType) {\n  cachedGames.set(category.key, state.games.data.filter((game) => {\n    return game.categories.includes(category.key);\n  }));\n}\n","import {StoreType} from \"../../store.type\";\nimport {GameStateInterface} from \"../types/game-state-interface\";\nimport {GameInterface} from \"../../../core/models/game-interface\";\nimport {prepareGameData} from \"./get-games-selector/prepare-game-data\";\nlet cachedGames = new Map<string, GameInterface[]>();\nexport default function getGamesSelector(state: StoreType): GameStateInterface {\n  const selectCategory  = state.categories.selected;\n\n  if(state.games.cache) {\n    return {\n      pending: false,\n      data: cachedGames.get(selectCategory) as GameInterface[],\n      error: null,\n      cache: false\n    }\n  }\n\n  return prepareGameData(state, selectCategory, cachedGames);\n}\n","import React, {useEffect} from \"react\";\nimport \"./MainContainer.scss\"\nimport Game from \"../Game/Game\";\nimport Spinner from \"../Spinner/Spinner\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators, Dispatch} from \"redux\";\nimport fetchGamesAndJackPots from \"../../redux/Services/fetch-games-and-jack-pots/fetch-games-and-jack-pots\";\nimport {StoreType} from \"../../redux/store.type\";\nimport {GameStateInterface} from \"../../redux/Game/types/game-state-interface\";\nimport getGamesSelector from \"../../redux/Game/selectors/get-games-selector\";\n\nexport const MainContainer = (props: {fetchGames: Function , gameStore: GameStateInterface}) => {\n  const {fetchGames, gameStore} = props;\n\n  useEffect(() => {\n    fetchGames();\n  }, [fetchGames]);\n\n  return (\n    <div className=\"Main-Container\">\n      <Spinner pending={gameStore.pending}/>\n      {renderGames(gameStore)}\n    </div>\n  );\n}\n\nfunction renderGames(game: GameStateInterface): JSX.Element[] {\n  const gamesCount = game.data.length;\n  let renderGamesArray = [];\n  for (let i = 0; i < gamesCount; i++) {\n    renderGamesArray.push(<Game game={game.data[i]} key={i} />);\n  }\n\n  return renderGamesArray;\n}\n\nconst mapStateToProps = (state: StoreType) => ({\n  gameStore: getGamesSelector(state)\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n  fetchGames: fetchGamesAndJackPots,\n}, dispatch)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainContainer);\n","import React from \"react\";\nimport {\n  Switch,\n  Route,\n  Redirect,\n  useParams\n} from \"react-router-dom\";\nimport MainContainer from \"../../components/MainContainer/MainContainer\";\nimport {StoreType} from \"../../redux/store.type\";\nimport {getCategoriesSelector} from \"../../redux/Category/selectors\";\nimport {connect} from \"react-redux\";\nimport {CategoryInterface} from \"../models/category-interface\";\nimport {bindActionCreators, Dispatch} from \"redux\";\nimport {SelectCategoryAction} from \"../../redux/Category/types/select-category-action-type\";\n\nexport function SiteRouter(props: { categories: CategoryInterface[], selectCategory: Function}) {\n  const {categories, selectCategory} = props;\n  return (\n    <>\n      <Route\n        exact\n        path=\"/\"\n        render={() => {\n          return (\n            <Redirect to=\"/home\" />\n          )\n        }}\n      />\n        <Switch>\n          <Route path=\"/:id\" children={<Child categories={categories} selectCategory={selectCategory}/>} />\n        </Switch>\n    </>\n  );\n}\n\nfunction Child(props: { categories: CategoryInterface[], selectCategory: Function}) {\n  const {categories, selectCategory} = props;\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let { id } = useParams();\n  if(!categories.some(category => category.key === id)) {\n    return <Redirect to=\"/home\" />\n  }\n  selectCategory(id);\n  return <MainContainer/>;\n}\n\nconst mapStateToProps = (state: StoreType) => ({\n  categories: getCategoriesSelector(state),\n})\n\nconst selectCategoryAction = (value: string) => ({ type: SelectCategoryAction, payload: value })\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n  selectCategory: selectCategoryAction\n}, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SiteRouter);\n","import React from 'react';\nimport './App.scss';\nimport Header from \"./components/Header/Header\";\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport SiteRouter from \"./core/SiteRouter/SiteRouter\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header/>\n        <SiteRouter/>\n      </Router>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {JackpotActionTypes} from \"../types\";\nimport {FetchJackpotAction} from \"../types/fetch-jackpot-action.type\";\nimport {JackpotsAggregate} from \"../../../core/aggregate/jackpots.aggregate\";\nimport {JackpotStateInterface} from \"../types/jackpot-state-interface\";\nexport const jackpotInitialState: JackpotStateInterface = { data: new JackpotsAggregate(), error: null};\n\nconst jackPotReducer = (state= jackpotInitialState, action: JackpotActionTypes) => {\n  switch (action.type) {\n    case FetchJackpotAction: {\n      return {\n        ...state,\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default jackPotReducer;\n","import {GamesActionTypes} from \"../types\";\nimport {FetchGamesAction} from \"../types/fetch-games-action.type\";\nimport {GameStateInterface} from \"../types/game-state-interface\";\nimport {CacheGamesAction} from \"../types/cache-games-action.type\";\n\nconst initialState: GameStateInterface = {\n  data: [],\n  pending: true,\n  error: null,\n  cache: false\n};\n\nconst gameReducer = (state= initialState, action: GamesActionTypes) => {\n  switch (action.type) {\n    case FetchGamesAction: {\n      return {\n        ...state,\n        pending: false,\n        data: action.payload,\n        cache: false\n      };\n    }\n    case CacheGamesAction: {\n      return {\n        ...state,\n        cache: true\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default gameReducer;\n","import {CategoryActionTypes} from \"../types/action-types\";\nimport {SelectCategoryAction} from \"../types/select-category-action-type\";\nimport {initialStateSelectCategory} from \"./data/initial-state-select-category\";\n\nconst categoryReducer = (state= initialStateSelectCategory, action: CategoryActionTypes) => {\n  switch (action.type) {\n    case SelectCategoryAction: {\n      return {\n        ...state,\n        selected: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default categoryReducer;\n","import { combineReducers } from \"redux\";\nimport jackpots from \"./Jackpot/reducers\";\nimport games from \"./Game/reducers/game-reducer\";\nimport categories from \"./Category/reducers\";\n\nexport default combineReducers({ jackpots, games, categories });\n","import { createStore, applyMiddleware  } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport thunk from 'redux-thunk';\n\nexport default createStore(rootReducer, applyMiddleware(thunk));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  </Provider>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}